{/* CORRECTED FLOW: Use attendance records grouped by userId for display */}
{Array.from(new Set(attendanceHistory?.map((record: any) => record.userId))).filter(Boolean).map((userId: any) => {
  // Get the first attendance record for this userId (all records for same user will have same student info)
  const userAttendanceRecord = attendanceHistory?.find((record: any) => record.userId === userId);
  
  // Student name comes from userId lookup in users table (via backend)
  const studentName = userAttendanceRecord?.student?.name || `Student ${userId}`;
  
  // StudentId for attendance marking (stored in attendance records)
  const studentId = userAttendanceRecord?.studentId;
  
  return (
    <tr
      key={userId}
      className="hover:bg-gray-50"
    >
      <td className="border border-gray-300 p-3 font-medium">
        <div className="font-medium">
          {studentName}
        </div>
        {/* DEBUG: Show correct flow - userId for name, studentId for attendance */}
        <div className="text-xs text-red-500 mt-1">
          DEBUG: User ID = {userId} (for name lookup), Student ID = {studentId} (for attendance), School ID = {user?.schoolId}
        </div>
      </td>
      <td className="border border-gray-300 p-2 text-center">
        {(() => {
          const paymentStatus = getStudentPaymentStatus(studentId);

          // If it's a virtual record with no payment requirement
          if (paymentStatus?.isVirtual && !paymentStatus?.mustPay) {
            return (
              <div className="flex flex-col items-center space-y-1">
                <span className="px-2 py-1 rounded text-xs text-gray-500 bg-gray-50">
                  {paymentStatus?.paymentNote || "Nothing to pay"}
                </span>
              </div>
            );
          }

          // Show payment status for actual payment records
          if (user?.role === "admin") {
            return (
              <div className="flex flex-col items-center space-y-1">
                <button
                  onClick={() => handleTogglePayment(studentId)}
                  className={`px-3 py-1 rounded text-sm font-medium ${
                    paymentStatus?.isPaid
                      ? "bg-green-100 text-green-800 hover:bg-green-200"
                      : "bg-red-100 text-red-800 hover:bg-red-200"
                  }`}
                  title={`${paymentStatus?.isPaid ? "مدفوع" : "غير مدفوع"} - اضغط للتغيير`}
                >
                  {paymentStatus?.isPaid ? "✅" : "❌"}
                </button>
                {paymentStatus?.paymentNote && (
                  <span className="text-xs text-gray-600">
                    {paymentStatus.paymentNote}
                  </span>
                )}
              </div>
            );
          } else {
            return (
              <div className="flex flex-col items-center space-y-1">
                <span
                  className={`px-3 py-1 rounded text-sm font-medium ${
                    paymentStatus?.isPaid
                      ? "bg-green-100 text-green-800"
                      : "bg-red-100 text-red-800"
                  }`}
                >
                  {paymentStatus?.isPaid ? "✅" : "❌"}
                </span>
                {paymentStatus?.paymentNote && (
                  <span className="text-xs text-gray-600">
                    {paymentStatus.paymentNote}
                  </span>
                )}
              </div>
            );
          }
        })()}
      </td>
      {currentMonthDates.map((date) => {
        // CORRECTED: Look for attendance using studentId (not userId) since attendance records are stored by studentId
        // But we still group the display by userId to avoid duplicate student rows
        const attendanceRecord = attendanceHistory.find(
          (record: any) =>
            record.studentId === studentId && // Use studentId for attendance lookup
            record.attendanceDate?.split("T")[0] === date
        );
        
        // DEBUG: Log correct attendance lookup flow
        console.log(`[DEBUG] Looking for attendance: User ID ${userId} (display), Student ID ${studentId} (attendance), Date ${date}`);
        console.log(`[DEBUG] Found record:`, attendanceRecord ? {
          studentId: attendanceRecord.studentId,
          userId: attendanceRecord.userId,
          studentName: attendanceRecord.student?.name,
          status: attendanceRecord.status,
          date: attendanceRecord.attendanceDate?.split("T")[0]
        } : 'No record found');

        return (
          <td
            key={date}
            className="border border-gray-300 p-1 text-center"
          >
            <button
              onClick={() =>
                handleTableAttendanceClick(
                  studentId, // Use studentId for attendance marking
                  date,
                  attendanceRecord?.status
                )
              }
              className={`w-8 h-8 rounded text-sm font-medium transition-colors ${
                attendanceRecord?.status === "present"
                  ? "bg-green-100 text-green-800 hover:bg-green-200"
                  : attendanceRecord?.status === "absent"
                  ? "bg-red-100 text-red-800 hover:bg-red-200"
                  : attendanceRecord?.status === "late"
                  ? "bg-yellow-100 text-yellow-800 hover:bg-yellow-200"
                  : "bg-gray-100 text-gray-500 hover:bg-gray-200"
              }`}
              title={`${studentName} - ${date} - ${attendanceRecord?.status || 'unmarked'}`}
            >
              {attendanceRecord?.status === "present"
                ? "✓"
                : attendanceRecord?.status === "absent"
                ? "✗"
                : attendanceRecord?.status === "late"
                ? "L"
                : "?"}
            </button>
          </td>
        );
      })}
    </tr>
  );
})}