Here's a detailed step-by-step guide for deploying your school management PWA to Railway (backend) + Vercel (frontend):

Railway Backend Deployment
1. Prepare Your Project
Create a GitHub repository with your current code
Ensure your package.json has the correct start script:
"scripts": {
  "start": "NODE_ENV=production tsx server/index.ts"
}
2. Railway Setup
Go to railway.app and sign up with GitHub
Click "New Project" → "Deploy from GitHub repo"
Select your repository
Railway will auto-detect it's a Node.js project
3. Configure Railway Environment
Add these environment variables in Railway dashboard:

NODE_ENV=production
DATABASE_URL (Railway will provide this when you add PostgreSQL)
All your Firebase config variables
Twilio/SendGrid keys
Session secrets
4. Add PostgreSQL Database
In Railway project dashboard, click "New" → "Database" → "PostgreSQL"
Railway automatically creates DATABASE_URL environment variable
Use Railway's database migration tools or connect directly to run your schema
5. Database Migration
Export current data from Replit using pg_dump
Import to Railway PostgreSQL using psql or Railway's tools
Run npm run db:push to ensure schema is up-to-date
Vercel Frontend Deployment
1. Prepare Frontend Build
Your current setup needs modification since it's full-stack:

Extract frontend files to separate folder or repo
Update API calls to point to Railway backend URL
Ensure build process creates static files only
2. Vercel Setup
Go to vercel.com and sign up with GitHub
Click "New Project" and import your repository
Configure build settings:
Framework Preset: Vite
Root Directory: client (if you keep monorepo structure)
Build Command: npm run build
Output Directory: dist
3. Environment Variables for Frontend
Add to Vercel dashboard:

VITE_API_URL=https://your-railway-app.railway.app
Any other VITE_ prefixed variables for frontend
Configuration Changes Needed
Backend (Railway)
Update CORS settings to allow Vercel domain
Modify session configuration for cross-origin
Update any hardcoded URLs to use environment variables
Frontend (Vercel)
Update all API calls to use VITE_API_URL instead of relative paths
Ensure PWA manifest points to correct domain
Update Firebase config if needed
Domain Setup
Custom Domains (Optional)
Railway: Add custom domain in project settings
Vercel: Add custom domain and configure DNS
Both provide automatic SSL certificates
Subdomain Structure Example
app.yourschool.com → Vercel frontend
api.yourschool.com → Railway backend
Deployment Workflow
Push to GitHub → Triggers automatic deployments
Railway redeploys backend automatically
Vercel rebuilds and redeploys frontend automatically
Both platforms provide deployment logs and rollback options
Monitoring & Maintenance
Railway provides database backups and metrics
Vercel offers analytics and performance monitoring
Both have generous free tiers suitable for small to medium schools
The main challenge will be separating your current monorepo structure into frontend/backend or configuring the build process to work with both platforms. Would you like me to show you the specific code changes needed for this deployment setup?