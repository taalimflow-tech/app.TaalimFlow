Alright — I see the real pain point here isn’t just filtering logic anymore,
it’s UX + data design for subject-year assignment so you don’t end up with a swamp of "French 1st year" / "French 2nd year" clones in your DB.

Here’s a breakdown of a clean solution:

**1. Keep Subjects Clean — Separate “Year Assignment” from “Subject”
Instead of creating a new teaching_module for every year variation of a subject, store:

Table	Purpose
teaching_modules	One row per subject (e.g., “French”) with education level & metadata
module_years	Mapping table between teaching_module.id and the year(s) it applies to

Example:

bash
Copy
Edit
teaching_modules:
id | name      | education_level
1  | French    | Primary
2  | Math      | Primary

module_years:
id | module_id | grade
1  | 1         | السنة الأولى ابتدائي
2  | 1         | السنة الثانية ابتدائي
3  | 2         | جميع المستويات
This way:

"French" is one subject, but can be linked to 1st year, 2nd year, etc. without duplicating names.

"جميع المستويات" is simply a special mapping that covers all filters.

2. Group Creation UX
When a teacher creates a group:

Step 1: Select Education Level → Filters available subjects.

Step 2: Select Subject → Shows checkboxes for available years linked to that subject.

Step 3: Select Year → Assigns group to that year in the linking table (not by renaming subject).

For legacy subjects with “جميع المستويات”:

Step 3 can auto-select all years or grey it out.

3. Filtering Logic (Clean)
Now the filtering logic becomes:

javascript
Copy
Edit
if (selectedYearFilter) {
  filteredGroups = filteredGroups.filter(group => {
    const moduleYears = moduleYearsMap[group.subjectId] || [];
    return moduleYears.includes(selectedYearFilter) || moduleYears.includes('جميع المستويات');
  });
}
Where moduleYearsMap is a pre-built object like:

javascript
Copy
Edit
{
  1: ['السنة الأولى ابتدائي', 'السنة الثانية ابتدائي'],
  2: ['جميع المستويات']
}
4. Benefits
Database stays clean: no more multiplying subjects for each year.

UI stays simple: Teachers pick a subject, then pick a year — no scrolling through "French 1st year", "French 2nd year", etc.

Filtering stays exact: Because mapping table controls visibility.

Legacy support: جميع المستويات is just a special mapping row.

5. Migration Path
Since you already have subjects duplicated by year:

Deduplicate: Keep one subject record per unique name.

Move year info into a mapping table.

Update group records to reference the single subject + correct mapping.

If you want, I can design the exact DB schema + group creation UI flow so your dev on Replit can implement without confusion.
That way, you’ll fix both the filtering problem and the long-term maintainability.

Do you want me to make that?